from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
from subprocess import check_output, CalledProcessError
import docker
import psutil
from datetime import datetime, timezone, timedelta

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Docker –∫–ª–∏–µ–Ω—Ç–∞
client = docker.from_env()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
active_jobs = {}
notification_history = []
notification_messages = []
notified_containers = set()
container_states = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
def get_system_metrics():
    cpu_usage = psutil.cpu_percent(interval=1)
    memory = psutil.virtual_memory()
    swap = psutil.swap_memory()
    disk = psutil.disk_usage('/')
    return (f"CPU Usage: {cpu_usage}%\n"
            f"Memory Usage: {memory.percent}% ({memory.used / 1024 / 1024 / 1024:.2f} GB / {memory.total / 1024 / 1024 / 1024:.2f} GB)\n"
            f"Swap Usage: {swap.percent}% ({swap.used / 1024 / 1024 / 1024:.2f} GB / {swap.total / 1024 / 1024 / 1024:.2f} GB)\n"
            f"Disk Usage: {disk.percent}% ({disk.used / 1024 / 1024 / 1024:.2f} GB / {disk.total / 1024 / 1024 / 1024:.2f} GB)")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
def get_container_status():
    containers = client.containers.list(all=True)
    status = "\n".join([f"{c.name}: {c.status}" for c in containers])
    return status

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫ –∏–∑ screen-—Å–µ—Å—Å–∏–π
def get_screen_logs(session_name, lines=20):
    try:
        check_output(["screen", "-S", session_name, "-X", "hardcopy", "/tmp/screenlog.txt"])
        with open("/tmp/screenlog.txt", "r") as log_file:
            logs = log_file.readlines()[-lines:]
        return f"Logs for session {session_name}:\n" + "".join(logs)
    except Exception as e:
        return f"Error: {e}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
def add_notification_to_history(message):
    now = datetime.now(timezone.utc).astimezone(tz=timezone(timedelta(hours=3)))
    timestamp = now.strftime("%Y-%m-%d %H:%M:%S")
    notification_history.append(f"[{timestamp}] {message}")
    if len(notification_history) > 50:
        notification_history.pop(0)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def start(update: Update, context: CallbackContext):
    # –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ callback_query (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if update.callback_query:
        query = update.callback_query
        query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å callback

        keyboard = [
            [InlineKeyboardButton("\ud83d\udcca –ú–µ—Ç—Ä–∏–∫–∏", callback_data='metrics')],
            [InlineKeyboardButton("\ud83d\udce6 –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", callback_data='container_status')],
            [InlineKeyboardButton("\ud83d\udd0d –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞", callback_data='container_logs')],
            [InlineKeyboardButton("\ud83d\udd0e –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data='notification_history')],
            [InlineKeyboardButton("\u2753 –ü–æ–º–æ—â—å", callback_data='help')]
        ]
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=InlineKeyboardMarkup(keyboard))

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ callback_query, –∞ –æ–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞)
    elif update.message:
        keyboard = [
            [InlineKeyboardButton("\ud83d\udcca –ú–µ—Ç—Ä–∏–∫–∏", callback_data='metrics')],
            [InlineKeyboardButton("\ud83d\udce6 –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", callback_data='container_status')],
            [InlineKeyboardButton("\ud83d\udd0d –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞", callback_data='container_logs')],
            [InlineKeyboardButton("\ud83d\udd0e –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data='notification_history')],
            [InlineKeyboardButton("\u2753 –ü–æ–º–æ—â—å", callback_data='help')]
        ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
        update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=InlineKeyboardMarkup(keyboard))

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
def back_button():
    return [
        [InlineKeyboardButton("\u2b05 –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
    ]

# –†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
def show_metrics(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä–æ–π –∑–∞–¥–∞—á–∏
    stop_job_for_chat(query.message.chat_id)

    job_context = {
        'chat_id': query.message.chat_id,
        'message_id': query.message.message_id,
        'callback': get_system_metrics,
        'reply_markup': back_button()
    }
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
    job = context.job_queue.run_repeating(
        lambda context: query.edit_message_text(get_system_metrics(), reply_markup=InlineKeyboardMarkup(back_button())), 
        interval=5, first=0
    )
    active_jobs[query.message.chat_id] = job

    # –ù–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
    query.edit_message_text(get_system_metrics(), reply_markup=InlineKeyboardMarkup(back_button()))

# –†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
def show_container_status(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    containers = client.containers.list(all=True)
    keyboard = []

    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
    for container in containers:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å: –ó–µ–ª–µ–Ω—ã–π –∏–ª–∏ –ö—Ä–∞—Å–Ω—ã–π –∫—Ä—É–∂–æ–∫
        if container.status == "running":
            status_icon = "üü¢"
        else:
            status_icon = "üî¥"

        keyboard.append([InlineKeyboardButton(f"{status_icon} {container.name}", callback_data=f'container_{container.name}')])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("\u2b05 –ù–∞–∑–∞–¥", callback_data="back_to_menu")])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def show_container_control_buttons(query, container_name, context):
    try:
        container = client.containers.get(container_name)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º
        keyboard = [
            [InlineKeyboardButton("‚èØ –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"start_{container_name}")],
            [InlineKeyboardButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"stop_{container_name}")],
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"restart_{container_name}")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=f"info_{container_name}")],
            [InlineKeyboardButton("\u2b05 –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º
        query.edit_message_text(
            f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} ({container.status})",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except docker.errors.NotFound:
        query.edit_message_text(
            f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("\u2b05 –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
        )

def show_confirmation_buttons(query, container_name, context, action):
    if action == "start":
        action_text = "–∑–∞–ø—É—Å—Ç–∏—Ç—å"
    elif action == "stop":
        action_text = "–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
    elif action == "restart":
        action_text = "–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"

    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data=f"confirm_{action}_{container_name}")],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data=f"container_{container_name}")],  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        [InlineKeyboardButton("\u2b05 –ù–∞–∑–∞–¥", callback_data=f"back_to_container_{container_name}")]
    ]

    query.edit_message_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ {action_text} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name}?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
  
def start_container(container_name, query, context: CallbackContext):
    try:
        container = client.containers.get(container_name)
        container.start()
        message = f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        context.bot.send_message(chat_id=query.message.chat_id, text=message)
        show_container_control_buttons(query, container_name, context)

    except docker.errors.NotFound:
        message = f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} –Ω–µ –Ω–∞–π–¥–µ–Ω."
        context.bot.send_message(chat_id=query.message.chat_id, text=message)

def stop_container(container_name, query, context: CallbackContext):
    try:
        container = client.containers.get(container_name)
        container.stop()
        message = f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        context.bot.send_message(chat_id=query.message.chat_id, text=message)
        show_container_control_buttons(query, container_name, context)

    except docker.errors.NotFound:
        message = f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} –Ω–µ –Ω–∞–π–¥–µ–Ω."
        context.bot.send_message(chat_id=query.message.chat_id, text=message)

def restart_container(container_name, query, context: CallbackContext):
    try:
        container = client.containers.get(container_name)
        container.restart()
        message = f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        context.bot.send_message(chat_id=query.message.chat_id, text=message)
        show_container_control_buttons(query, container_name, context)

    except docker.errors.NotFound:
        message = f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} –Ω–µ –Ω–∞–π–¥–µ–Ω."
        context.bot.send_message(chat_id=query.message.chat_id, text=message)

def show_container_info(container_name, query, context: CallbackContext):
    try:
        container = client.containers.get(container_name)
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        info = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ {container_name}:\n" \
               f"ID: {container.id}\n" \
               f"–°—Ç–∞—Ç—É—Å: {container.status}\n" \
               f"–ò–º—è: {container.name}\n" \
               f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {container.attrs['State']['StartedAt']}\n" \
               f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–æ—Ä—Ç—ã: {container.attrs['NetworkSettings']['Ports']}\n"

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º
        keyboard = [
            [InlineKeyboardButton("\u2b05 –ù–∞–∑–∞–¥", callback_data=f"back_to_container_{container_name}")]
        ]

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        query.edit_message_text(
            f"{info}",  # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –≤ —Ç–µ–∫—Å—Ç
            reply_markup=InlineKeyboardMarkup(keyboard)  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        )
    except docker.errors.NotFound:
        message = f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} –Ω–µ –Ω–∞–π–¥–µ–Ω."
        query.edit_message_text(
            f"{message}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("\u2b05 –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
        )

# –í—ã–±–æ—Ä screen-—Å–µ—Å—Å–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
def select_screen_session(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    try:
        sessions = check_output(["screen", "-ls"]).decode('utf-8')
        session_names = [line.split()[0] for line in sessions.splitlines() if "Detached" in line or "Attached" in line]
        keyboard = [[InlineKeyboardButton(name, callback_data=f'screen_logs_{name}')]
                    for name in session_names]
    except CalledProcessError:
        keyboard = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("\u2b05 –ù–∞–∑–∞–¥", callback_data='back_to_menu')])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º screen-—Å–µ—Å—Å–∏–∏
    query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ screen-—Å–µ—Å—Å–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤:", reply_markup=InlineKeyboardMarkup(keyboard))

# –†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤ screen-—Å–µ—Å—Å–∏–∏
def show_screen_logs(update: Update, context: CallbackContext):
    query = update.callback_query
    session_name = query.data.split('_', 2)[2]
    query.answer()

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä–æ–π –∑–∞–¥–∞—á–∏
    stop_job_for_chat(query.message.chat_id)

    def logs_callback():
        return get_screen_logs(session_name)

    job_context = {
        'chat_id': query.message.chat_id,
        'message_id': query.message.message_id,
        'callback': logs_callback,
        'reply_markup': back_button()
    }
   # –ò—Å–ø–æ–ª—å–∑—É–µ–º lambda –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–æ–≥–∞–º–∏ —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    job = context.job_queue.run_repeating(
        lambda context: query.edit_message_text(logs_callback(), reply_markup=InlineKeyboardMarkup(back_button())), 
        interval=10, first=0
    )
    active_jobs[query.message.chat_id] = job
    
    # –ù–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–æ–≥–∞–º–∏
    query.edit_message_text(get_screen_logs(session_name), reply_markup=InlineKeyboardMarkup(back_button()))

# –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def show_notification_history(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    history_text = "\n".join(notification_history) if notification_history else "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞."
    keyboard = [
        [InlineKeyboardButton("\ud83d\uddd1\ufe0f –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data='clear_notification_history')],
        [InlineKeyboardButton("\u2b05 –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
    ]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    query.edit_message_text(f"–ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n{history_text}", reply_markup=InlineKeyboardMarkup(keyboard))

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á –¥–ª—è —á–∞—Ç–∞
def stop_job_for_chat(chat_id):
    if chat_id in active_jobs:
        active_jobs[chat_id].schedule_removal()
        del active_jobs[chat_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
def button(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    if query.data == 'metrics':
        show_metrics(update, context)
    
    elif query.data == 'container_status':
        show_container_status(update, context)

    elif query.data == 'container_logs':
        select_screen_session(update, context)

    elif query.data.startswith('screen_logs_'):
        show_screen_logs(update, context)

    elif query.data == 'notification_history':
        show_notification_history(update, context)

    elif query.data == 'clear_notification_history':
        clear_notification_history(update, context)

    elif query.data == 'back_to_menu':
        back_to_menu(update, context)

    elif query.data == 'help':
        query.edit_message_text(
            "–ü–æ–º–æ—â—å:\n1. –ú–µ—Ç—Ä–∏–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É CPU –∏ –ø–∞–º—è—Ç–∏.\n2. –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.\n3. –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ - –≤—ã–±–µ—Ä–∏—Ç–µ screen-—Å–µ—Å—Å–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤.\n4. –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.",
            reply_markup=InlineKeyboardMarkup(back_button())
        )

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    elif query.data.startswith('container_'):
        container_name = query.data.split('_')[1]
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º
        show_container_control_buttons(query, container_name, context)

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ (–∑–∞–ø—É—Å–∫, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫)
    elif query.data.startswith('start_'):
        container_name = query.data.split('_')[1]
        show_confirmation_buttons(query, container_name, context, action="start")
    
    elif query.data.startswith('stop_'):
        container_name = query.data.split('_')[1]
        show_confirmation_buttons(query, container_name, context, action="stop")

    elif query.data.startswith('restart_'):
        container_name = query.data.split('_')[1]
        show_confirmation_buttons(query, container_name, context, action="restart")

    elif query.data.startswith('info_'):
        container_name = query.data.split('_')[1]
        show_container_info(container_name, query, context)

    elif query.data.startswith('back_to_container_'):
        container_name = query.data.split('_')[2]
        show_container_control_buttons(query, container_name, context)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (–î–∞ / –ù–µ—Ç)
    elif query.data.startswith('confirm_'):
        action, container_name = query.data.split('_')[1], query.data.split('_')[2]
        if action == "start":
            start_container(container_name, query, context)
        elif action == "stop":
            stop_container(container_name, query, context)
        elif action == "restart":
            restart_container(container_name, query, context)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def check_container_health_and_notify(context: CallbackContext):
    global container_states, notification_messages

    containers = client.containers.list(all=True)

    for container in containers:
        container_name = container.name
        current_status = container.status

        if container_name not in container_states or container_states[container_name] != current_status:
            container_states[container_name] = current_status

            if current_status in ['exited', 'stopped', 'unhealthy']:
                message = f"\u2757 –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_status}."
                add_notification_to_history(message)

                sent_message = context.bot.send_message(
                    chat_id=context.job.context['chat_id'],
                    text=message,
                    disable_notification=False
                )
                notification_messages.append(sent_message.message_id)

        elif current_status == 'running' and container_name in notified_containers:
            notified_containers.remove(container_name)
          
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def clear_notification_history(update: Update, context: CallbackContext):
    global notification_history, notification_messages
    query = update.callback_query
    query.answer()

    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notification_history = []

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    for message_id in notification_messages:
        try:
            context.bot.delete_message(chat_id=query.message.chat_id, message_id=message_id)
        except Exception as e:
            query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("\u2b05 –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]))

    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    notification_messages.clear()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏
    query.edit_message_text(
        "–ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("\u2b05 –ù–∞–∑–∞–¥", callback_data='back_to_menu')]])
    )

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á –¥–ª—è —á–∞—Ç–∞
def stop_job_for_chat(chat_id):
    if chat_id in active_jobs:
        active_jobs[chat_id].schedule_removal()
        del active_jobs[chat_id]

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def back_to_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä–æ–π –∑–∞–¥–∞—á–∏
    stop_job_for_chat(query.message.chat_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    start(update, context)

def main():
    global container_states

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    containers = client.containers.list(all=True)
    container_states = {container.name: container.status for container in containers}

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Updater –∏ Dispatcher
    updater = Updater("your_telegram_bot_token", use_context=True)
    dispatcher = updater.dispatcher

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(CallbackQueryHandler(button))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
    job_queue = updater.job_queue
    job_queue.run_repeating(check_container_health_and_notify, interval=60, first=0, context={'chat_id': 'your_chat_id'})

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
